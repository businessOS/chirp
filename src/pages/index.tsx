import { SignInButton, useUser } from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";

import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";
import dayjs from 'dayjs'
import relativeTime from 'dayjs/plugin/relativeTime'
import Image from "next/image";

import { LoadingPage } from "~/components/loading";
import { useState } from "react";

dayjs.extend(relativeTime)

const CreatePostWizard = () => {
  const [input, setInput] = useState<string>('');

  const { user } = useUser()
  const ctx = api.useContext();

  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
    onSuccess: () => {
      setInput('')
      void ctx.posts.invalidate()
    }
  });
  if (!user) return null

  return (
    <div className="flex gap-3 w-full">
      <Image src={user.profileImageUrl} alt={`@${user.username || `user`}'s profile picture`} className="w-14 h-14 rounded-full" width={56} height={56} />
      <input
        placeholder="type some emojis!"
        className="bg-transparent grow outline-none p-4"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        disabled={isPosting}
      />
      <button onClick={() => mutate({ content: input })}>Post</button>
    </div>
  )
};

type postWithUser = RouterOutputs["posts"]["getAll"][number];

const PostView = (props: postWithUser) => {
  const { post, author } = props
  return (
    <div key={post.id} className="flex border-b border-slate-400 p-4 gap-3">
      <Image
        src={author.profileImageUrl}
        alt={`@${author.username}'s profile picture`}
        className="w-12 h-12 rounded-full align-middle"
        width={56}
        height={56}
      />
      <div className="flex flex-col">
        <div className="flex text-slate-300  gap-2">
          <span className=" font-semibold">@{author?.username}</span>
          {` Â· `}
          <span className="font-thin">{dayjs(post.createdAt).fromNow()}</span>
        </div>
        <span className="text-xl">{post.content}</span>
      </div>

    </div>
  )
}

const Feed = () => {
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery()

  if (postsLoading) return <LoadingPage />
  if (!data) return <div>Something went wront</div>

  return (
    <div className="flex flex-col">
      {data?.map((fullPost) => (
        <PostView {...fullPost} key={fullPost.post.id} />
      ))}
    </div>
  )
}

const Home: NextPage = () => {

  const { isLoaded: userLoaded, isSignedIn } = useUser();

  if (!userLoaded) return <div />


  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center h-screen">
        <div className="w-full border-x border-slate-400 md:max-w-2xl" >
          <div className="border-b border-slate-400 p-4">
            {!isSignedIn &&
              <div className="flex justify-center">
                <SignInButton mode="modal">
                  <button className="text-slate-100">Login</button>
                </SignInButton>
              </div>
            }
            {!!isSignedIn && <CreatePostWizard />
            }
          </div>
          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;
